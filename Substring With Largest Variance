2272. Substring With Largest Variance

The variance of a string is defined as the largest difference between the number of occurrences of any 2 characters present in the string. Note the two characters may or may not be the same.

Given a string s consisting of lowercase English letters only, return the largest variance possible among all substrings of s.

A substring is a contiguous sequence of characters within a string.

 

Example 1:

Input: s = "aababbb"
Output: 3
Explanation:
All possible variances along with their respective substrings are listed below:
- Variance 0 for substrings "a", "aa", "ab", "abab", "aababb", "ba", "b", "bb", and "bbb".
- Variance 1 for substrings "aab", "aba", "abb", "aabab", "ababb", "aababbb", and "bab".
- Variance 2 for substrings "aaba", "ababbb", "abbb", and "babb".
- Variance 3 for substring "babbb".
Since the largest possible variance is 3, we return it.
Example 2:

Input: s = "abcde"
Output: 0
Explanation:
No letter occurs more than once in s, so the variance of every substring is 0.
 

Constraints:

*1 <= s.length <= 104
*s consists of lowercase English letters.
-----------------------------------------------------------------------------------------------





Solution: C++


class Solution {
public:
    int largestVariance(string s) {
        int n = s.size();
        int res = 0;
    
        for (char p = 'a'; p <= 'z'; p++) {
            for (char q = 'a'; q <= 'z'; q++) {
                if (p == q) continue;
                
                int pCount = 0; 
                int qCount = 0; 
                
                
                bool canExtendprevQ = false;
                
                for (auto c : s) {
                    if (c == p) pCount++;
                    if (c == q) qCount++;
                    
                    if (qCount > 0) {
                        res = max(res, pCount - qCount);
                    }
                    else if (qCount == 0 && canExtendprevQ) {
                        res = max(res, pCount - 1);
                    }
                    
                    if (qCount > pCount) {
                        qCount = pCount = 0;
                        
                        canExtendprevQ = true;
                    }
                }
            }
        }
        return res;
    }
};





